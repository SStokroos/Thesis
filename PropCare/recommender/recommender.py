{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "\n",
    "class Recommender(object):\n",
    "\n",
    "    def __init__(self, num_users, num_items,\n",
    "                 colname_user = 'idx_user', colname_item = 'idx_item',\n",
    "                 colname_outcome = 'outcome', colname_prediction='pred',\n",
    "                 colname_treatment='treated', colname_propensity='propensity'):\n",
    "        super().__init__()\n",
    "\n",
    "        self.num_users = num_users\n",
    "        self.num_items = num_items\n",
    "        self.colname_user = colname_user\n",
    "        self.colname_item = colname_item\n",
    "        self.colname_outcome = colname_outcome\n",
    "        self.colname_prediction = colname_prediction\n",
    "        self.colname_treatment = colname_treatment\n",
    "        self.colname_propensity = colname_propensity\n",
    "\n",
    "    def train(self, df, iter=100):\n",
    "        pass\n",
    "\n",
    "    def predict(self, df):\n",
    "        pass\n",
    "\n",
    "    def recommend(self, df, num_rec=10):\n",
    "        pass\n",
    "\n",
    "    def func_sigmoid(self, x):\n",
    "        if x >= 0:\n",
    "            return 1.0 / (1.0 + np.exp(-x))\n",
    "        else:\n",
    "            return np.exp(x) / (1.0 + np.exp(x))\n",
    "\n",
    "    def sample_time(self):\n",
    "        return random.randrange(self.num_times)\n",
    "\n",
    "    def sample_user(self, idx_time, TP=True, TN=True, CP=True, CN=True):\n",
    "        while True:\n",
    "            flag_condition = 1\n",
    "            u = random.randrange(self.num_users)\n",
    "            if TP:\n",
    "                if u not in self.dict_treatment_positive_sets[idx_time]:\n",
    "                    flag_condition = 0\n",
    "            if TN:\n",
    "                if u not in self.dict_treatment_negative_sets[idx_time]:\n",
    "                    flag_condition = 0\n",
    "            if CP:\n",
    "                if u not in self.dict_control_positive_sets[idx_time]:\n",
    "                    flag_condition = 0\n",
    "            if CN:\n",
    "                if u not in self.dict_control_negative_sets[idx_time]:\n",
    "                    flag_condition = 0\n",
    "            if flag_condition > 0:\n",
    "                return u\n",
    "\n",
    "    def sample_treatment(self, idx_time, idx_user):\n",
    "        return random.choice(self.dict_treatment_sets[idx_time][idx_user])\n",
    "\n",
    "    def sample_control(self, idx_time, idx_user):\n",
    "        while True:\n",
    "            flag_condition = 1\n",
    "            i = random.randrange(self.num_items)\n",
    "            if idx_user in self.dict_treatment_positive_sets[idx_time]:\n",
    "                if i in self.dict_treatment_positive_sets[idx_time][idx_user]:\n",
    "                    flag_condition = 0\n",
    "            if idx_user in self.dict_treatment_negative_sets[idx_time]:\n",
    "                if i in self.dict_treatment_negative_sets[idx_time][idx_user]:\n",
    "                    flag_condition = 0\n",
    "            if flag_condition > 0:\n",
    "                return i\n",
    "\n",
    "    # in case control is rare\n",
    "    def sample_control2(self, idx_time, idx_user):\n",
    "        cand_control = np.arange(self.num_items)\n",
    "        cand_control = cand_control[np.isin(cand_control, self.dict_treatment_sets[idx_time][idx_user])]\n",
    "        return random.choice(cand_control)\n",
    "\n",
    "    def sample_treatment_positive(self, idx_time, idx_user):\n",
    "        return random.choice(self.dict_treatment_positive_sets[idx_time][idx_user])\n",
    "\n",
    "    def sample_treatment_negative(self, idx_time, idx_user):\n",
    "        return random.choice(self.dict_treatment_negative_sets[idx_time][idx_user])\n",
    "\n",
    "    def sample_control_positive(self, idx_time, idx_user):\n",
    "        return random.choice(self.dict_control_positive_sets[idx_time][idx_user])\n",
    "\n",
    "    def sample_control_negative(self, idx_time, idx_user):\n",
    "        while True:\n",
    "            flag_condition = 1\n",
    "            i = random.randrange(self.num_items)\n",
    "            if idx_user in self.dict_treatment_positive_sets[idx_time]:\n",
    "                if i in self.dict_treatment_positive_sets[idx_time][idx_user]:\n",
    "                    flag_condition = 0\n",
    "            if idx_user in self.dict_treatment_negative_sets[idx_time]:\n",
    "                if i in self.dict_treatment_negative_sets[idx_time][idx_user]:\n",
    "                    flag_condition = 0\n",
    "            if idx_user in self.dict_control_positive_sets[idx_time]:\n",
    "                if i in self.dict_control_positive_sets[idx_time][idx_user]:\n",
    "                    flag_condition = 0\n",
    "            if flag_condition > 0:\n",
    "                return i\n",
    "\n",
    "    # TP: treatment-positive\n",
    "    # CP: control-positive\n",
    "    # TN: treatment-negative\n",
    "    # TN: control-negative\n",
    "    def sample_triplet(self):\n",
    "        t = self.sample_time()\n",
    "        if random.random() <= self.alpha:  # CN as positive\n",
    "            if random.random() <= 0.5:  # TP as positive\n",
    "                if random.random() <= 0.5:  # TP vs. TN\n",
    "                    u = self.sample_user(t, TP=True, TN=True, CP=False, CN=False)\n",
    "                    i = self.sample_treatment_positive(t, u)\n",
    "                    j = self.sample_treatment_negative(t, u)\n",
    "                else:  # TP vs. CP\n",
    "                    u = self.sample_user(t, TP=True, TN=False, CP=True, CN=False)\n",
    "                    i = self.sample_treatment_positive(t, u)\n",
    "                    j = self.sample_control_positive(t, u)\n",
    "            else:  # CN as positive\n",
    "                if random.random() <= 0.5:  # CN vs. TN\n",
    "                    u = self.sample_user(t, TP=False, TN=True, CP=False, CN=True)\n",
    "                    i = self.sample_control_negative(t, u)\n",
    "                    j = self.sample_treatment_negative(t, u)\n",
    "                else:  # CN vs. CP\n",
    "                    u = self.sample_user(t, TP=False, TN=False, CP=True, CN=True)\n",
    "                    i = self.sample_control_negative(t, u)\n",
    "                    j = self.sample_control_positive(t, u)\n",
    "        else:  # CN as negative\n",
    "            if random.random() <= 0.333:  # TP vs. CN\n",
    "                u = self.sample_user(t, TP=True, TN=False, CP=False, CN=True)\n",
    "                i = self.sample_treatment_positive(t, u)\n",
    "                j = self.sample_control_negative(t, u)\n",
    "            elif random.random() <= 0.5:  # TP vs. TN\n",
    "                u = self.sample_user(t, TP=True, TN=True, CP=False, CN=False)\n",
    "                i = self.sample_treatment_positive(t, u)\n",
    "                j = self.sample_treatment_negative(t, u)\n",
    "            else:  # TP vs. CP\n",
    "                u = self.sample_user(t, TP=True, TN=False, CP=True, CN=False)\n",
    "                i = self.sample_treatment_positive(t, u)\n",
    "                j = self.sample_control_positive(t, u)\n",
    "\n",
    "        return u, i, j\n",
    "\n",
    "    def sample_pair(self):\n",
    "        t = self.sample_time()\n",
    "        if random.random() < 0.5: # pick treatment\n",
    "            if random.random() > self.ratio_nega: # TP\n",
    "                u = self.sample_user(t, TP=True, TN=False, CP=False, CN=False)\n",
    "                i = self.sample_treatment_positive(t, u)\n",
    "                flag_positive = 1\n",
    "            else: # TN\n",
    "                u = self.sample_user(t, TP=False, TN=True, CP=False, CN=False)\n",
    "                i = self.sample_treatment_negative(t, u)\n",
    "                flag_positive = 0\n",
    "        else: # pick control\n",
    "            if random.random() > self.ratio_nega:  # CP\n",
    "                u = self.sample_user(t, TP=False, TN=False, CP=True, CN=False)\n",
    "                i = self.sample_control_positive(t, u)\n",
    "                flag_positive = 0\n",
    "            else:  # CN\n",
    "                u = self.sample_user(t, TP=False, TN=False, CP=False, CN=True)\n",
    "                i = self.sample_control_negative(t, u)\n",
    "                if random.random() <= self.alpha:  # CN as positive\n",
    "                    flag_positive = 1\n",
    "                else:\n",
    "                    flag_positive = 0\n",
    "\n",
    "        return u, i, flag_positive\n",
    "\n",
    "    # getter\n",
    "    def get_propensity(self, idx_user, idx_item):\n",
    "        return self.dict_propensity[idx_user][idx_item]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
